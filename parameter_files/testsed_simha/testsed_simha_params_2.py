import numpy as np
import fsps,os,threed_dutils
from sedpy import attenuation
from bsfh import priors, sedmodel, elines
from astropy.cosmology import WMAP9
import bsfh.datautils as dutils
tophat = priors.tophat
logarithmic = priors.logarithmic

#############
# RUN_PARAMS
#############

run_params = {'verbose':True,
              'outfile':os.getenv('APPS')+'/threedhst_bsfh/results/testsed_simha/testsed_simha',
              'ftol':0.5e-5, 
              'maxfev':5000,
              'nwalkers':496,
              'nburn':[64,64,128], 
              'niter': 1200,
              'initial_disp':0.1,
              'debug': False,
              'min_error': 0.01,
              'abs_error': False,
              'spec': False, 
              'phot':True,
              'photname':os.getenv('APPS')+'/threedhst_bsfh/data/testsed_simha.cat',
              'truename':os.getenv('APPS')+'/threedhst_bsfh/data/testsed_simha.dat',
              'objname':'2',
              }

############
# OBS
#############

def load_obs_3dhst(filename, objnum, zperr=False):
    """
    Custom-built because the photometric files are actually generated by the model
    """
    obs ={}

    with open(filename, 'r') as f:
        hdr = f.readline().split()
    dat = np.loadtxt(filename, comments = '#',
                     dtype = np.dtype([(n, np.float) for n in hdr[1:]]))
    obj_ind = np.where(dat['id'] == int(objnum))[0][0]
    
    # extract fluxes+uncertainties for all objects and all filters
    flux_fields = [f for f in dat.dtype.names if f[0:2] == 'f_']
    unc_fields = [f for f in dat.dtype.names if f[0:2] == 'e_']
    filters = [f[2:] for f in flux_fields]

    # extract fluxes for particular object, converting from record array to numpy array
    flux = dat[flux_fields].view(float).reshape(len(dat),-1)[obj_ind]
    unc  = dat[unc_fields].view(float).reshape(len(dat),-1)[obj_ind]

    # define all outputs
    wave_effective = np.array(threed_dutils.return_mwave_custom(filters))
    phot_mask = np.logical_or(np.logical_or((flux != unc),(flux > 0)),flux != -99.0)

    if zperr is True:
        zp_offsets = threed_dutils.load_zp_offsets(None)
        band_names = np.array([x['Band'].lower()+'_'+x['Field'].lower() for x in zp_offsets])
        
        for kk in xrange(len(filters)):
            match = band_names == filters[kk]
            if np.sum(match) > 0:
                maggies_unc[kk] = ( (maggies_unc[kk]**2) + (maggies[kk]*(1-zp_offsets[match]['Flux-Correction'][0]))**2 ) **0.5

    # sort outputs based on effective wavelength
    points = zip(wave_effective,filters,phot_mask,flux,unc)
    sorted_points = sorted(points)

    # build output dictionary
    obs['wave_effective'] = np.array([point[0] for point in sorted_points])
    obs['filters'] = np.array([point[1] for point in sorted_points])
    obs['phot_mask'] =  np.array([point[2] for point in sorted_points])
    obs['maggies'] = np.array([point[3] for point in sorted_points])
    obs['maggies_unc'] =  np.array([point[4] for point in sorted_points])
    obs['wavelength'] = None
    obs['spectrum'] = None

    return obs

obs = load_obs_3dhst(run_params['photname'], run_params['objname'], zperr=False)

#############
# MODEL_PARAMS
#############

class BurstyModel(sedmodel.CSPModel):
	
    def one_sed(self, component_index=0, sps=None, norm_spec=False, filterlist=[]):
        """Get the SED of one component for a multicomponent composite
        SFH.  Should set this up to work as an iterator.

        CHANGES: added dust1, log(tau)

        :param component_index:
            Integer index of the component to calculate the SED for.
            
        :params sps:
            A python-fsps StellarPopulation object to be used for
            generating the SED.

        :param filterlist:
            A list of strings giving the (FSPS) names of the filters
            onto which the spectrum will be projected.
            
        :returns spec:
            The restframe spectrum in units of L_\odot/Hz.
            
        :returns maggies:
            Broadband fluxes through the filters named in
            ``filterlist``, ndarray.  Units are observed frame
            absolute maggies: M = -2.5 * log_{10}(maggies).
            
        :returns extra:
            The extra information corresponding to this component.
        """
        # Pass the model parameters through to the sps object,
        # and keep track of the mass of this component
        mass = 1.0
        for k, vs in self.params.iteritems():
            try:
                v = vs[component_index]
                #n_param_is_vec += 1
            except(IndexError, TypeError):
                v = vs
            if k in sps.params.all_params:
                if k == 'zmet':
                    vv = np.abs(v - (np.arange( len(sps.zlegend))+1)).argmin()+1
                elif k == 'dust1':
                    # temporary! replace with smarter function soon
                    vv = self.params['dust2']*1.86+0.0
                elif k == 'tau':
                    vv = 10**self.params['tau']
                else:
                    vv = v.copy()
                sps.params[k] = vv
            if k == 'mass':
                mass = v
        #now get the magnitudes and spectrum
        w, spec = sps.get_spectrum(tage=sps.params['tage'], peraa=False)
        mags = sps.get_mags(tage=sps.params['tage'],
                            bands=filterlist)

        # normalize by (current) stellar mass and get correct units (distance_modulus)
        mass_norm = mass/sps.stellar_mass

        return (mass_norm * spec ,
                mass_norm * 10**(-0.4*(mags)),
                w)

    def theta_disps(self, thetas, initial_disp=0.1):
        """Get a vector of dispersions for each parameter to use in
        generating sampler balls for emcee's Ensemble sampler.

        :param initial_disp: (default: 0.1)
            The default dispersion to use in case the `init_disp` key
            is not provided in the parameter configuration.  This is
            in units of the parameter, so e.g. 0.1 will result in a
            smpler ball with a dispersion that is 10% of the central
            parameter value.
        """
        disp = np.zeros(self.ndim) + initial_disp
        for par, inds in self.theta_index.iteritems():
            
            # fractional dispersion
            if par == 'mass' or \
               par == 'tage':
                disp[inds[0]:inds[1]] = self._config_dict[par].get('init_disp', initial_disp) * thetas[inds[0]:inds[1]]

            # constant (log) dispersion
            if par == 'tau' or \
               par == 'metallicity' or \
               par == 'sf_slope':
                disp[inds[0]:inds[1]] = self._config_dict[par].get('init_disp', initial_disp)

            # higher dispersion if farther in the past
            if par == 'sf_trunc':
                disp[inds[0]:inds[1]] = self._config_dict[par].get('init_disp', initial_disp) * \
                                        (self._config_dict['tage']['prior_args']['maxi']-thetas[inds[0]:inds[1]])

            # fractional dispersion with artificial floor
            if par == 'dust2' or \
               par == 'dust_index':
                disp[inds[0]:inds[1]] = (self._config_dict[par].get('init_disp', initial_disp) * thetas[inds[0]:inds[1]]**2 + \
                                         0.1**2)**0.5
            
        return disp

    def theta_disp_floor(self, thetas):
        """Get a vector of dispersions for each parameter to use as
        a floor for the walker-calculated dispersions.
        """
        disp = np.zeros(self.ndim)
        for par, inds in self.theta_index.iteritems():
            
            # constant 1% floor
            if par == 'mass':
                disp[inds[0]:inds[1]] = 0.01 * thetas[inds[0]:inds[1]]

            # constant 0.05 floor (log space, sf_slope, dust_index)
            if par == 'tau' or \
               par == 'logzsol' or \
               par == 'sf_slope' or \
               par == 'dust2' or \
               par == 'dust_index':
                disp[inds[0]:inds[1]] = 0.05

            # 100 Myr floor (SFH params)
            if par == 'tage' or \
               par == 'sf_trunc':
                disp[inds[0]:inds[1]] = 0.1
            
        return disp

    def prior_product(self, theta):
        """
        Return a scalar which is the ln of the product of the prior
        probabilities for each element of theta.  Requires that the
        prior functions are defined in the theta descriptor.

        :param theta:
            Iterable containing the free model parameter values.

        :returns lnp_prior:
            The log of the product of the prior probabilities for
            these parameter values.
        """  
        lnp_prior = 0

        # implement uniqueness of outliers
        if 'gp_outlier_locs' in self.theta_index:
            start,end = self.theta_index['gp_outlier_locs']
            outlier_locs = theta[start:end]
            if len(np.unique(np.round(outlier_locs))) != len(outlier_locs):
                return -np.inf

        # ensure sf_trunc < tage - buffer
        if 'sf_trunc' in self.theta_index:
            start,end = self.theta_index['sf_trunc']
            sf_trunc = theta[start:end]
            start,end = self.theta_index['tage']
            tage = theta[start:end]

            if (sf_trunc+0.05 > tage):
                return -np.inf

        for k, v in self.theta_index.iteritems():
            start, end = v
            lnp_prior += np.sum(self._config_dict[k]['prior_function']
                                (theta[start:end], **self._config_dict[k]['prior_args']))
        return lnp_prior

#### SET SFH PRIORS #####

#### TUNIV #####
#tuniv = WMAP9.age(model_params[parmlist.index('zred')]['init']).value
tuniv  = 14.0
time_buffer = tuniv*0.05
run_params['tuniv']       = tuniv
run_params['time_buffer'] = 0.05

#### TAGE #####
tage_maxi = tuniv
tage_init = tuniv/2.
tage_mini  = 0.11      # FSPS standard

#### SF_TRUNC #####
sf_trunc_mini  = tage_mini-run_params['time_buffer']
sf_trunc_init = tuniv/3.
sf_trunc_max  = tage_maxi-run_params['time_buffer']

model_type = BurstyModel
model_params = []

param_template = {'name':'', 'N':1, 'isfree': False,
                  'init':0.0, 'units':'', 'label':'',
                  'prior_function_name': None, 'prior_args': None}

###### BASIC PARAMETERS ##########
model_params.append({'name': 'zred', 'N': 1,
                        'isfree': False,
                        'init': 1.0,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':4.0}})

model_params.append({'name': 'add_igm_absorption', 'N': 1,
                        'isfree': False,
                        'init': 1,
                        'units': None,
                        'prior_function': None,
                        'prior_args': None})

model_params.append({'name': 'add_agb_dust_model', 'N': 1,
                        'isfree': False,
                        'init': True,
                        'units': None,
                        'prior_function': None,
                        'prior_args': None})
                        
model_params.append({'name': 'mass', 'N': 1,
                        'isfree': True,
                        'init': 1e10,
                        'init_disp': 0.15,
                        'units': r'M_\odot',
                        'prior_function': tophat,
                        'prior_args': {'mini':1e7,'maxi':1e14}})

model_params.append({'name': 'pmetals', 'N': 1,
                        'isfree': False,
                        'init': -99,
                        'units': '',
                        'prior_function': None,
                        'prior_args': {'mini':-3, 'maxi':-1}})

model_params.append({'name': 'logzsol', 'N': 1,
                        'isfree': True,
                        'init': -0.1,
                        'init_disp': 0.15,
                        'units': r'$\log (Z/Z_\odot)$',
                        'prior_function': tophat,
                        'prior_args': {'mini':-1.98, 'maxi':0.19}})
                        
###### SFH   ########
model_params.append({'name': 'sfh', 'N': 1,
                        'isfree': False,
                        'init': 5,
                        'units': 'type',
                        'prior_function_name': None,
                        'prior_args': None})

model_params.append({'name': 'tau', 'N': 1,
                        'isfree': True,
                        'init': 0.0,
                        'units': 'log(Gyr)',
                        'prior_function': tophat,
                        'prior_args': {'mini':-1,
                                       'maxi':2}})

model_params.append({'name': 'tage', 'N': 1,
                        'isfree': True,
                        'init': tage_init,
                        'init_disp': 0.15,
                        'units': 'Gyr',
                        'prior_function': tophat,
                        'prior_args': {'mini':tage_mini, 'maxi':tage_maxi}})

model_params.append({'name': 'tburst', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'init_disp': 1.0,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':10.0}})

model_params.append({'name': 'fburst', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'init_disp': 0.5,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':0.2}})

model_params.append({'name': 'fconst', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':1.0}})

model_params.append({'name': 'sf_start', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'units': 'Gyr',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0,'maxi':14.0}})

model_params.append({'name': 'sf_trunc', 'N': 1,
                        'isfree': True,
                        'init': sf_trunc_init,
                        'init_disp': 0.2,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':sf_trunc_mini, 'maxi':sf_trunc_max}})

model_params.append({'name': 'sf_slope', 'N': 1,
                        'isfree': True,
                        'init': -1.0,
                        'init_disp': 0.15,
                        'units': None,
                        'prior_function': tophat,
                        'prior_args': {'mini':-10.0,'maxi':2.0}})

########    IMF  ##############
model_params.append({'name': 'imf_type', 'N': 1,
                        	 'isfree': False,
                             'init': 1, #1 = chabrier
                       		 'units': None,
                       		 'prior_function_name': None,
                        	 'prior_args': None})

######## Dust Absorption ##############
model_params.append({'name': 'dust_type', 'N': 1,
                        'isfree': False,
                        'init': 0,
                        'units': 'index',
                        'prior_function_name': None,
                        'prior_args': None})
                        
model_params.append({'name': 'dust1', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'init_disp': 0.5,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':8.0}})

model_params.append({'name': 'dust2', 'N': 1,
                        'isfree': True,
                        'init': 1.0,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0,'maxi':4.0}})

model_params.append({'name': 'dust_index', 'N': 1,
                        'isfree': True,
                        'init': -0.7,
                        'units': '',
                        'prior_function': priors.normal_clipped,
                        'prior_args': {'mini':-3.0, 'maxi': -0.4,'mean':-0.7,'sigma':0.5}})

model_params.append({'name': 'dust1_index', 'N': 1,
                        'isfree': False,
                        'init': -1.0,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':-1.5, 'maxi':-0.5}})

model_params.append({'name': 'dust_tesc', 'N': 1,
                        'isfree': False,
                        'init': 7.0,
                        'units': 'log(Gyr)',
                        'prior_function_name': None,
                        'prior_args': None})

###### Dust Emission ##############
model_params.append({'name': 'add_dust_emission', 'N': 1,
                        'isfree': False,
                        'init': 1,
                        'units': None,
                        'prior_function': None,
                        'prior_args': None})

model_params.append({'name': 'duste_gamma', 'N': 1,
                        'isfree': False,
                        'init': 0.01,
                        'units': None,
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':1.0}})

model_params.append({'name': 'duste_umin', 'N': 1,
                        'isfree': False,
                        'init': 1.0,
                        'units': None,
                        'prior_function': tophat,
                        'prior_args': {'mini':0.1, 'maxi':25.0}})

model_params.append({'name': 'duste_qpah', 'N': 1,
                        'isfree': False,
                        'init': 3.0,
                        'units': 'percent',
                        'prior_function': tophat,
                        'prior_args': {'mini':0.0, 'maxi':10.0}})

###### Nebular Emission ###########
model_params.append({'name': 'add_neb_emission', 'N': 1,
                        'isfree': False,
                        'init': 2,
                        'units': r'log Z/Z_\odot',
                        'prior_function_name': None,
                        'prior_args': None})

model_params.append({'name': 'add_neb_continuum', 'N': 1,
                        'isfree': False,
                        'init': True,
                        'units': r'log Z/Z_\odot',
                        'prior_function_name': None,
                        'prior_args': None})
                        
model_params.append({'name': 'gas_logz', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'units': r'log Z/Z_\odot',
                        'prior_function': tophat,
                        'prior_args': {'mini':-2.0, 'maxi':0.5}})

model_params.append({'name': 'gas_logu', 'N': 1,
                        'isfree': False,
                        'init': -2.0,
                        'units': '',
                        'prior_function': tophat,
                        'prior_args': {'mini':-4, 'maxi':-1}})


####### Calibration ##########
model_params.append({'name': 'phot_jitter', 'N': 1,
                        'isfree': False,
                        'init': 0.0,
                        'init_disp': 0.5,
                        'units': 'fractional maggies (mags/1.086)',
                        'prior_function':tophat,
                        'prior_args': {'mini':0.0, 'maxi':0.5}})

# name outfile
run_params['outfile'] = run_params['outfile']+'_'+run_params['objname']
